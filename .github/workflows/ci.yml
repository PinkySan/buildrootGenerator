name: Build Buildroot with custom defconfig

on:
  push:
    branches: [ main ]
    paths:
      - '.github/workflows/**'
      - 'configs/**'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      BUILDROOT_VERSION: 2024.02.1
      DEFCONFIG_PATH: configs/clang_sysroot_armhf_defconfig
      CLANG_VERSION: 20

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false # erh√∂ht die Sicherheit, Token wird nach Checkout entfernt

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential bison flex gettext libncurses5-dev \
            unzip wget cpio rsync file bc python3 ccache

      - name: Cache ccache
        uses: actions/cache@v4
        with:
          path: buildroot/output/host/usr/bin/.ccache
          key: ccache-${{ github.run_id }}

      - name: Install latest Clang
        run: |
          sudo apt-get install -y lsb-release wget software-properties-common gnupg
          wget https://apt.llvm.org/llvm.sh
          chmod +x llvm.sh
          sudo ./llvm.sh ${{ env.CLANG_VERSION }}
          sudo ln -sf /usr/bin/clang-${{ env.CLANG_VERSION }} /usr/bin/clang
          sudo ln -sf /usr/bin/clang++-${{ env.CLANG_VERSION }} /usr/bin/clang++

      - name: Cache Buildroot
        id: cache-buildroot
        uses: actions/cache@v4
        with:
          path: buildroot
          key: buildroot-${{ env.BUILDROOT_VERSION }}

      - name: Download Buildroot
        if: steps.cache-buildroot.outputs.cache-hit != 'true'
        run: |
          wget https://buildroot.org/downloads/buildroot-${BUILDROOT_VERSION}.tar.gz
          tar -xzf buildroot-${BUILDROOT_VERSION}.tar.gz
          mv buildroot-${BUILDROOT_VERSION} buildroot

      - name: Copy custom defconfig
        run: |
          cp $DEFCONFIG_PATH buildroot/configs/

      - name: Run defconfig
        working-directory: buildroot
        run: make $(basename ${{ env.DEFCONFIG_PATH }})

      - name: Build Buildroot
        working-directory: buildroot
        run: make -j$(nproc)

      - name: Archive sysroot
        run: |
          tar -czf sysroot.tar.gz -C buildroot/output/host/arm-buildroot-linux-gnueabihf/sysroot .

      - name: Upload sysroot
        if: always() # Artefakt wird auch bei Fehlern hochgeladen
        uses: actions/upload-artifact@v4
        with:
          name: sysroot
          path: sysroot.tar.gz

      - name: Upload rootfs.tar
        if: always() # Artefakt wird auch bei Fehlern hochgeladen
        uses: actions/upload-artifact@v4
        with:
          name: rootfs.tar
          path: buildroot/output/images/rootfs.tar

      - name: Upload Buildroot logs
        if: always() # Buildroot-Logs werden immer hochgeladen, hilfreich zur Fehlersuche
        uses: actions/upload-artifact@v4
        with:
          name: buildroot-logs
          path: |
            buildroot/output/build/build-time.log
            buildroot/output/build/packages-file-list.txt
            buildroot/output/build/.config
            buildroot/output/build/defconfig
            buildroot/output/build/failed-packages.log
            buildroot/output/build/packages/*.log
            buildroot/output/build/packages/*.err

      - name: Cleanup
        if: always()
        run: |
          rm -rf buildroot buildroot-*.tar.gz sysroot.tar.gz